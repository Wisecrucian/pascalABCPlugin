{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "PascalABC Programming Language",
	"patterns": [

        {
            "name": "meta.function-call.invalid",
            "begin": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\(",
            "end": "\\)",
            "patterns": [
              {
                "include": "#invalid"
              }
            ]
        },    

        {
            "name": "meta.function-call.invalid",
            "begin": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\begin",
            "end": "\\end;",
            "patterns": [
              {
                "include": "#invalid"
              }
            ]
        },
        {
          "name": "storage.type",
          "match": "\\b(integer|real|string|boolean|char|byte|word|longint|shortint|extended|single|double|comp|currency|pointer)\\b"
        },
          
        {
            "name": "comment.line.todo.mylanguage",
            "match": "//TODO.*",
            "captures": {
              "0": {
                "name": "comment.todo.mylanguage"
              }
            }
        },          

		{
            "name": "comment.block",
            "begin": "{",
            "end": "}",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.comment"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.comment"
                }
            }
        },


		{
            "name": "comment.block",
            "begin": "\\(\\*",
            "end": "\\*\\)",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.comment"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.comment"
                }
            }
        },

        {
            "name": "keyword.control",
            "match": "\\b(if|else|end|begin|unit|function|var|type|assert|procedure|class|while|for|to|downto|do|repeat|until|break|constructor|continue|exit|case|with|try|except|finally|raise|on|div|and|or|not|in|as)\\b"
        },
        {
            "name": "constant.language",
            "match": "(true|false|nil)",
            "settings": {
                 "foreground": "#FF0080"
            }

        },
        {
            "name": "support.function",
            "match": "(Log|Sqrt|Abs|Sqr|Cos|Sin|Tan|ArcCos|ArcSin|ArcTan|Exp|Ln|Pi|SetLength|Length|Copy|Delete|Insert|Pos|LowerCase|UpperCase|Trim|TrimLeft|TrimRight)"
        },
       
        {
            "name": "string.quoted.single",
            "begin": "'",
            "end": "'",
            "patterns": [
                {
                    "name": "constant.character.escape",
                    "match": "\\\\."
                }
            ]
        },
        {
            "name": "string.quoted.double",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape",
                    "match": "\\\\."
                }
            ]
        },
        {
            "name": "comment.line.double-slash",
            "match": "\\/\\/.*$",
            "captures": {
                "0": {
                    "name": "punctuation.definition.comment"
                }
            }
        },
        {
            "name": "storage.modifier",
            "match": "\\b(new|self|static|virtual|override|abstract|final)\\b"
        },
        {
            "name": "keyword.operator",
            "match": "\\b(and|or|not|xor|shl|shr|as|is|in)\\b"
        },

        {
            "name": "source.pas.embedded",
            "begin": "<%",
            "end": "%>",
            "patterns": [
                {
                    "name": "meta.embedded.expression",
                    "begin": "{",
                    "end": "}",
                    "patterns": [
                        {
                            "include": "#main"
                        }
                    ]
                }
            ]
        }
    

    ],
    "repository": {
        "main": {
            "patterns": [
                {
                    "name": "keyword.operator",
                    "match": "(\\+|\\-|\\*|\\/|\\=|\\<\\>|\\<|\\>|\\.\\.\\.)"
                },
                {
                    "name": "constant.numeric",
                    "match": "[0-9]+(\\.[0-9]+)?"
                },
                {
                    "name": "entity.name.function",
                    "match": "[a-zA-Z_]+[a-zA-Z0-9_]*[ \\t]*\\("
                },
                {
                  "name": "storage.type",
                  "match": "\\b(integer|real|string|boolean|char|byte|word|longint|shortint|extended|single|double|comp|currency|pointer)\\b"
                }
                
            ]
        },
        "invalid": {
            "patterns": [
            {
                "include": "#invalid.undeclared"
            }
            ]
        }
  
    },

	"scopeName": "source.pas"
}