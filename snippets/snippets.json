{


  "Обьявление переменной с автовыведением типа": {
    "prefix": "var",
    "body": [
      "var ${1:variable_name}: ${2:variable_type};"
    ],
    "description": "Обьявление переменной с автовыведением типа"
  },

  "Обьявление переменной": {
    "prefix": "var",
    "body": [
      "var ${1:variable_name}: ${2:variable_type} := ${2:variable_value};"
    ],
    "description": "Обьявление переменной"
  },

  "Обьявление нескольких переменных":
  {
    "prefix": "var",
    "body": [
      "var (${1:variable_names}) := (${2:variable_values});"
    ],
    "description": "Обьявление нескольких переменных"
  },

  "Процедура": {
    "prefix": "procedure",
    "body": [
      "procedure ${1:procedure_name}()",
      "begin",
      "//TODO",
      "end;"
    ],
    "description": "Процедура"
  },

  "Функция с телом": {
    "prefix": "function",
    "body": [
      "function ${1:functionName}(${2:variableName}: ${3:variableValue}): ${4:returnType};",
      "begin",
      "\t// TODO",
      "end;"
    ],
    "description": "Функция с телом"
  },

  "Короткая функция": {
    "prefix": "function",
    "body": [
      "function ${1:functionName}(${2:variableName}) := //TODO;"
    ],
    "description": "Короткая функция"
  },



  "Блок begin-end": {
    "prefix": "begin",
    "body": [
      "begin",
      "${1:// program code}",
      "end;"
    ],
    "description": "Блок begin-end"
  },

  "End block": {
    "prefix": "end",
    "body": [
      "end;"
    ],
    "description": "end"
  },

  "loop цикл": {
    "prefix": "loop",
    "body": [
      "loop ${1:count} do",
      "begin",
      " //TODO",
      "end;"
    ],
    "description": "loop цикл"
  },

  "for цикл": {
    "prefix": "for",
    "body": [
      "for var ${1:variable_name}:= ${2:variable_value} to ${3:variable_value} do",
      "begin",
      " //TODO",
      "end;"
    ],
    "description": "for цикл"
  },

  "Тернарный оператор":
  {
    "prefix": "if",
    "body": [
      "if ${1:value} then ${2:value} else ${3:value}"
    ],
    "description": "Тернарный оператор"
  },

  "Конструкция if-then": {
    "prefix": "if-then",
    "body": [
      "if (condition) then",
      "begin",
      "\t// statements",
      "end;"
    ],
    "description": "Конструкция if-then"
  },

  "Конструкция repeat-until": {
    "prefix": "repeat-until",
    "body": [
      "repeat",
      "\t// statements",
      "until (condition);"
    ],
    "description": "Конструкция repeat-until"
  },

  "case": {
    "prefix": "case",
    "body": [
      "case variable of",
      "\tvalue1: // statements",
      "\tvalue2: // statements",
      "\telse // statements",
      "end;"
    ],
    "description": "case"
  },


  "Печать текста с пробелами":
  {
    "prefix": "print",
    "body": [
      "Print(${1:variable_values});"
    ],
    "description": "Печать текста с пробелами"
  },

  "Печать текста с пробелами и переводом строки":
  {
    "prefix": "println",
    "body": [
      "Println(${1:variable_values});"
    ],
    "description": "Печать текста с пробелами и переводом строки"
  },
  "Печать текста":
  {
    "prefix": "write",
    "body": [
      "Write(${1:variable_values});"
    ],
    "description": "Печать текста"
  },

  "Печать текста с переводом строки":
  {
    "prefix": "writeln",
    "body": [
      "Writeln(${1:variable_values});"
    ],
    "description": "Печать текста с переводом строки"
  },

  "Нахождение минимума из двух":
  {
    "prefix": "min",
    "body": [
      "Min(${1:variable_values},${2:variable_values});"
    ],
    "description": "Нахождение минимума из двух"
  },

  "Нахождение максимума из двух":
  {
    "prefix": "Max",
    "body": [
      "Max(${1:variable_values},${2:variable_values});"
    ],
    "description": "Нахождение максимума из двух"
  },

  "Swap function":
  {
    "prefix": "swap",
    "body": [
      "Swap(${1:variable_values},${2:variable_values});"
    ],
    "description": "Swap function"
  },

  "In":
  {
    "prefix": "in",
    "body": [
      "${1:value} in ${2:value}..${3:value}"
    ],
    "description": "in"
  },

  "readLn": {
    "prefix": "readLn",
    "body": [
      "ReadLn();"
    ],
    "description": "PascalABC.NET reads a line of text from the console."
  },

  "random": {
    "prefix": "random",
    "body": [
      "Randomize;",
      "Random(x);"
    ],
    "description": "PascalABC.NET generates a random integer between 0 and x-1."
  }
}
